package org.db.ddbserver;

import java.util.LinkedList;

/**
 * a sql construct tree
 * @author Administrator
 *
 */
public class SqlTree {
	private SqlTreeNode root;
	private LinkedList<SqlTreeNode> leaf;
	private LinkedList<SqlTreeNode> temp_join;
	private GDD gdd = new GDD();
	
	public SqlTree() {
		root = new SqlTreeNode();
		root.setType("root");
		leaf = new LinkedList<SqlTreeNode>();
		temp_join = new LinkedList<SqlTreeNode>();
	}
	
	public void modifySqlTree() {
		
	}
	
	/**
	 * build the tree
	 * @param s
	 */
	public void buildTree(SqlSentence s) {
		//a lot of sentences
		String[] select_list = s.getSelect_list();
		String[] from_list = s.getFrom_list();
		String[] where_list = s.getWhere_list();
		
		//a lot of constructions
		//we don't need to use project, we can use select_list
		//such as book.title
		LinkedList<String> project = new LinkedList<String>();
		LinkedList<String[]> join = new LinkedList<String[]>();
		LinkedList<String[]> select = new LinkedList<String[]>();
		
		//all the leaves, deal with from clause first		
		for(int i = 0; i < from_list.length; i++) {
			SqlTreeNode node = new SqlTreeNode();
			node.setLeaf(true);
			node.setDetail(from_list[i]);
			node.setType("table");	
			node.setTablename(from_list[i]);
			leaf.add(node);
			//System.out.println(node.getDetail());
		}
				
		//make join and select constructions
		for(int j = 0; j < where_list.length; j++) {
			String t = where_list[j];
			
			/**
			 * if where == ""
			 * then continue
			 * 
			 * @@@@@@@@attention
			 * !!!!!!!!attention
			 */
			if(t == "")
				continue;
			String ss[] = makeJoinSelect(t);
			if(ss[1] == "join")
				join.add(ss);
			else
				select.add(ss);
		}
		
		//make project constructions, although it is useless
		for(int i = 0; i < select_list.length; i++) {
			/**
			 * if * change to the whole colomn
			 */
			if(select_list[i].equals("*")) {
				for(int j = 0; j < leaf.size(); j++) {
					String[] ss = gdd.getAllColumn(leaf.get(i).getTablename());
					for(int k = 0; k < ss.length; k++) {
						project.add(ss[k]);
					}
				}
				break;
			}
			if(select_list[i].contains(".")) {
				project.add(select_list[i]);
			}
			else {
				/**
				 * if there is only one leaf and the select clause is like title, we need to change it into
				 * book.title.
				 */
				project.add(leaf.get(0).getTablename() +  "." + select_list[i]);
			}
		}
			
		/**
		 * select
		 */
		/*for(int i = 0; i < select.size(); i++) {
			String[] ss = select.get(i);
			SqlTreeNode temp = new SqlTreeNode();
			temp.setType(ss[1]);
			temp.setDetail(ss[2] + ss[3] + ss[4]);
			String selectTable = this.getSelectTable(ss[2]);
			SqlTreeNode left;
			left = findInLeaf(selectTable);
			left.setParent(temp);
			temp.setLeft(left);
		}
		*/
		for(int i = 0; i < select.size(); i++) {
			String[] ss = select.get(i);
			String selectTable = this.getSelectTable(ss[2]);
			SqlTreeNode temp = null;
			for(int j = 0; j < leaf.size(); j++) {
				if(leaf.get(j).getTablename().equals(selectTable)) {
					temp = leaf.get(j);
					break;
				}
			}
			
			
			
			temp.setDetail(ss[1] + " " + ss[2] + ss[3] + ss[4]);
			//temp.setConstruction("c_select from table " + temp.getTablename() + " " + ss[2] + ss[3] + ss[4]);
			//SqlTreeNode left;
			//left = findInLeaf(selectTable);
			//left.setParent(temp);
			//temp.setLeft(left);
		}
		
		
		
		/**
		 * project
		 */
		for(int i = 0; i < leaf.size(); i++) {
			String detail;
			//to eliminate the possiblity of id and id repeated 
			if(leaf.size() == 1 || isInProject(gdd.getKey(leaf.get(i).getTablename()), project)) {
				 detail = "";
			}
			else {
				/**
				 * & replace \n
				 */
				detail = gdd.getKey(leaf.get(i).getTablename()) + "&";
			}
			for(int j = i; j < project.size(); j++) {	
				String ss = project.get(j);
				String projectTable = this.getProjectTable(ss);
				if(projectTable.equals(leaf.get(i).getTablename())) {
					/**
					 * & replace \n
					 */
					detail = detail.concat(ss + "&");
				}
			}	
			//if(detail.equals(gdd.getAllColumn(leaf.get(i).getTablename()))) {
				
				//todo
				//todo
			//}
			SqlTreeNode temp = new SqlTreeNode();
			temp.setType("project");
			temp.setDetail(detail.substring(0, detail.length() - 1));
			//temp.setConstruction("c_project " + detail.substring(0, detail.length() - 1));
			SqlTreeNode left;
			left = findInLeaf(leaf.get(i).getTablename());
			left.setParent(temp);
			temp.setLeft(left);
		}
		
		/**
		 * join
		 */
		for(int i = 0; i < join.size(); i++) {
			String[] ss = getJoinTable(join.get(i));
			SqlTreeNode temp = new SqlTreeNode();			
			temp.setType("join");
			temp.setDetail(join.get(i)[2] + join.get(i)[3] + join.get(i)[4]);
			//temp.setConstruction("c_join " + join.get(i)[2] + join.get(i)[3] + join.get(i)[4]);
			SqlTreeNode left, right;
			//System.out.println(ss[0] + " " + ss[1]);
			left = findInLeaf(ss[0]);
			right = findInLeaf(ss[1]);
			left.setParent(temp);
			right.setParent(temp);
			temp.setLeft(left);
			temp.setRight(right);			
		}
	
		
		/**
		 * customer vertical fragmentation
		 */
		for(int i = 0; i < leaf.size(); i++) {
			SqlTreeNode l = leaf.get(i);
			if(l.getTablename().equals("customer")) {
				if(!isInProject("customer.rank", project) && !isInSelect("customer.rank", select) && !isInProject("customer.name", project) && !isInSelect("customer.name", select)) {
					l.setDetail(l.getDetail() + " customer_rank");
					break;
				}
				if(!isInProject("customer.rank", project) && !isInSelect("customer.rank", select)) {
					l.setDetail(l.getDetail() + " customer_name");
					break;
				}
				if(!isInProject("customer.name", project) && !isInSelect("customer.name", select)) {
					l.setDetail(l.getDetail() + " customer_rank");
					break;
				}

				SqlTreeNode left, right;
				left = new SqlTreeNode();
				left.setParent(l);
				l.setLeft(left);
				left.setLeaf(true);
				left.setType("table");
				left.setTablename("customer");
				left.setDetail("customer_name");

				right = new SqlTreeNode();
				right.setParent(l);
				l.setRight(right);
				right.setLeaf(true);
				right.setType("table");
				right.setTablename("customer");
				right.setDetail("customer_rank");

				l.setType("join");
				l.setDetail("customer.id=customer.id");
				l.setLeaf(false);
				break;
			}
		}
		
		String book = "1&2&3", publisher = "1&2&3&4", orders = "1&2&3&4";
		/**
		 * get all the select which has the same table together
		 */
		for(int i = 0; i < select.size(); i++) {
			String[] ss = select.get(i);
			if(ss[2].equals("book.id") || ss[2].equals("orders.book_id")) {
				book = handleInter(book, gdd.bookId(Integer.valueOf(ss[4]), ss[3]));
				orders = handleInter(orders, gdd.ordersBookId(Integer.valueOf(ss[4]), ss[3]));
			} else if(ss[2].equals("publisher.id")) {
				publisher = handleInter(publisher, gdd.publisherId(Integer.valueOf(ss[4]), ss[3]));
			} else if(ss[2].equals("publisher.nation")) {
				publisher = handleInter(publisher, gdd.publisherNation(ss[4].substring(1, ss[4].length() - 1)));
			} else if(ss[2].equals("customer.id") || ss[2].equals("orders.customer_id")) {
				orders = handleInter(orders, gdd.ordersCustomerId(Integer.valueOf(ss[4]), ss[3]));
			}		
		}
		
		//System.out.println("zzzz: book " + book);
		//System.out.println("zzzz: publisher " + publisher);
		//System.out.println("zzzz: orders " + orders);

		String[] xbook = book.split("&");
		String[] xorders = orders.split("&");
		String[] xpublisher = publisher.split("&");
		int cpublisher = -1;
		int corders = -1;
		int cbook = -1;
		/**
		 * Union
		 */
		for(int i = 0; i < leaf.size(); i++) {
			SqlTreeNode l = leaf.get(i);
			if(l.getTablename().equals("customer")) {
				continue;
			} else if(l.getTablename().equals("publisher")) {
				cpublisher = publisher.split("&").length;
				//l.setDetail(l.getDetail() + " " + "publisher " + xpublisher[cpublisher - 1]);
			} else if(l.getTablename().equals("orders")) {
				corders = orders.split("&").length;
				//l.setDetail(l.getDetail() + " " + "orders " + xorders[corders - 1]);
			} else if(l.getTablename().equals("book")) {
				cbook = book.split("&").length;
				//l.setDetail(l.getDetail() + " " + "book " + xbook[cbook - 1]);
			}
		}
		//System.out.println("xxxx: book " + cbook);
		//System.out.println("xxxx: publisher " + cpublisher);
		//System.out.println("xxxx: orders " + corders);
		
		
		
		SqlTreeNode toBeCopied = findInLeaf(from_list[0]);
		//this.printTree(toBeCopied);
		
		if(cpublisher != -1) {
			for(int i = 0; i < cpublisher; i++) {
				if(cbook != -1) {
					for(int j = 0; j < cbook; j++) {
						if(corders != -1) {
							for(int k = 0; k < corders; k++) {
								
								/////////
								SqlTreeNode u = new SqlTreeNode();
								u.setType("union");
								//u.setDetail("j, i, k");
								SqlTreeNode l = findInLeaf(from_list[0]);
								SqlTreeNode r = this.duplicateSqlTree(toBeCopied, xbook[j], xpublisher[i], xorders[k]);
								u.setRight(r);
								u.setLeft(l);
								l.setParent(u);
								r.setParent(u);
							}
						} else {
								/////////
								SqlTreeNode u = new SqlTreeNode();
								u.setType("union");
								//u.setDetail("j, i, -1");
								SqlTreeNode l = findInLeaf(from_list[0]);
								SqlTreeNode r = this.duplicateSqlTree(toBeCopied, xbook[j], xpublisher[i], "-1");
								u.setRight(r);
								u.setLeft(l);
								l.setParent(u);
								r.setParent(u);
							
						}
					}
				} else {
					if (corders != -1) {
						for (int k = 0; k < corders; k++) {

							// ///////
							SqlTreeNode u = new SqlTreeNode();
							u.setType("union");
							//u.setDetail("-1, i, k");
							SqlTreeNode l = findInLeaf(from_list[0]);
							SqlTreeNode r = this.duplicateSqlTree(toBeCopied, "-1", xpublisher[i], xorders[k]);
							u.setRight(r);
							u.setLeft(l);
							l.setParent(u);
							r.setParent(u);
						}
					} else {
						// ///////
						SqlTreeNode u = new SqlTreeNode();
						u.setType("union");
						//u.setDetail("-1, i, -1");
						SqlTreeNode l = findInLeaf(from_list[0]);
						SqlTreeNode r = this.duplicateSqlTree(toBeCopied, "-1", xpublisher[i], "-1");
						u.setRight(r);
						u.setLeft(l);
						l.setParent(u);
						r.setParent(u);
					}
				}
			}
		} else {
			if(cbook != -1) {
				for(int j = 0; j < cbook; j++) {
					if(corders != -1) {
						for(int k = 0; k < corders; k++) {
							
							/////////
							SqlTreeNode u = new SqlTreeNode();
							u.setType("union");
							//u.setDetail("j, -1, k");
							SqlTreeNode l = findInLeaf(from_list[0]);
							SqlTreeNode r = this.duplicateSqlTree(toBeCopied, xbook[j], "-1", xorders[k]);
							u.setRight(r);
							u.setLeft(l);
							l.setParent(u);
							r.setParent(u);
						}
					} else {
							/////////
						SqlTreeNode u = new SqlTreeNode();
						u.setType("union");
						//u.setDetail("j, -1, -1");
						SqlTreeNode l = findInLeaf(from_list[0]);
						SqlTreeNode r = this.duplicateSqlTree(toBeCopied, xbook[j], "-1", "-1");
						u.setRight(r);
						u.setLeft(l);
						l.setParent(u);
						r.setParent(u);
					}
					
				}
			} else {
				if (corders != -1) {
					for (int k = 0; k < corders; k++) {

						// ///////
						SqlTreeNode u = new SqlTreeNode();
						u.setType("union");
						//u.setDetail("-1, -1, k");
						SqlTreeNode l = findInLeaf(from_list[0]);
						SqlTreeNode r = this.duplicateSqlTree(toBeCopied, "-1", "-1", xorders[k]);
						u.setRight(r);
						u.setLeft(l);
						l.setParent(u);
						r.setParent(u);
					}
				} else {
					// ///////
					SqlTreeNode u = new SqlTreeNode();
					u.setType("union");
					//u.setDetail("-1, -1, -1");
					SqlTreeNode l = findInLeaf(from_list[0]);
				SqlTreeNode r = this.duplicateSqlTree(toBeCopied, "-1", "-1", "-1");
					u.setRight(r);
					u.setLeft(l);
					l.setParent(u);
					r.setParent(u);
				}
			}
		}	
		
		/**
		 * more project and it is the final project
		 */
		if(leaf.size() > 1) {
			String detail = "";
			for(int j = 0; j < project.size(); j++) {	
				String ss = project.get(j);
				//String projectTable = this.getProjectTable(ss);
				
				/**
				 * & replace \n
				 */
				detail = detail.concat(ss + "&");
			}	
			SqlTreeNode temp = new SqlTreeNode();
			temp.setType("project");
			temp.setDetail(detail.substring(0, detail.length() - 1));
			SqlTreeNode left;
			left = findInLeaf(leaf.get(0).getTablename());
			left.setParent(temp);
			temp.setLeft(left);
			//???????????????????temp.setParent(root);
		}
		
		root.setLeft(findInLeaf(from_list[0]));
		
		deleteFirstUnion();
	}
	
	public void deleteFirstUnion() {
		SqlTreeNode node = leaf.get(0);
		while(!node.getType().equals("union")) {
			node = node.getParent();
		}
		if(node != null) {
			if(node.getParent() == null) {
				root = node.getRight();
			} else {
				node.getRight().setParent(node.getParent());
				node.getParent().setLeft(node.getRight());
			}
		}

	}
	
	/**
	 * 
	 * @param node
	 * @param book
	 * @param publisher
	 * @param orders
	 * @return
	 */
	public SqlTreeNode duplicateSqlTree(SqlTreeNode node, String book, String publisher, String orders) {
		if(node == null)
			return null;
		SqlTreeNode t = new SqlTreeNode(node);
		
		if(node.getType().equals("table")) {
			
			if(t.getTablename().equals("book")) {
				t.setDetail(t.getDetail() + " from " + "book                      " + book);
			}
			if(t.getTablename().equals("publisher")) {
				t.setDetail(t.getDetail() + " from " + "publisher                 " + publisher);
			}
			if(t.getTablename().equals("orders")) {
				t.setDetail(t.getDetail() + " from " + "orders                    " + orders);
			}
		}
		SqlTreeNode left, right;
		left = duplicateSqlTree(node.getLeft(), book, publisher, orders);
		right = duplicateSqlTree(node.getRight(), book, publisher, orders);
		t.setLeft(left);
		t.setRight(right);
		if(left != null)
			left.setParent(t);
		if(right != null)
			right.setParent(t);
		return t;
	}
	
	public String handleInter(String r, String s) {
	       String[] rr = r.split("&");
	       String[] ss = s.split("&");
	       String result = "";
	       for(int i = 0; i < rr.length; i++) {
	           for(int j = 0; j < ss.length; j++) {
	               if(rr[i].equals(ss[j])) {
	                   result = result + rr[i] + "&";
	                   break;
	               }
	           }
	       }
	       if(result == "")
	    	   return "";
	       return result.substring(0, result.length() - 1);
	   }

	
	/**
	 * 
	 * @param s
	 * 			the string of project such as book.title or title
	 * @param l
	 * 			all the project colomn from select clause
	 * @return
	 */
	private boolean isInProject(String s, LinkedList<String> l) {
		for(int i = 0; i < l.size(); i++) {
			if(s.equals(l.get(i)))
				return true;
		}
		return false;
	}
	
	/**
	 * 
	 * @param s
	 * 			the string of project such as customer.rank = 1
	 * @param l
	 * 			all the project colomn from where clause
	 * @return
	 */
	private boolean isInSelect(String s, LinkedList<String[]> l) {
		for(int i = 0; i < l.size(); i++) {
			if(s.equals(l.get(i)[2])) {
				return true;
			}
		}
		return false;
	}
	
	public SqlTreeNode getRoot() {
		return root;
	}

	public void setRoot(SqlTreeNode root) {
		this.root = root;
	}

	public LinkedList<SqlTreeNode> getLeaf() {
		return leaf;
	}

	public void setLeaf(LinkedList<SqlTreeNode> leaf) {
		this.leaf = leaf;
	}

	public LinkedList<SqlTreeNode> getTemp_join() {
		return temp_join;
	}

	public void setTemp_join(LinkedList<SqlTreeNode> temp_join) {
		this.temp_join = temp_join;
	}

	public void printCommand(SqlTreeNode node) {
		if(node == null)
			return;
		printCommand(node.getLeft());
		printCommand(node.getRight());
		System.out.println(node.getGlobal_id() + " *** " + node.getType() + " *** " + node.getDetail());
		
	}
	
	private int global_id = 1;
	
	public void setGlobalId(SqlTreeNode node) {
		if(node == null)
			return;
		setGlobalId(node.getLeft());
		setGlobalId(node.getRight());
		node.setGlobal_id(global_id);
		global_id++;
	}
	
	public void printTree(SqlTreeNode node) {
		if(node == null)
			return;
		System.out.println("**************");
		System.out.println(node.getType() + "\n" + node.getDetail());
		printTree(node.getLeft());
		printTree(node.getRight());
	}
	
	public void printTree1(SqlTreeNode node, int num) {
		if(node != null) {
			printTree1(node.getRight(), num + 7);
			for(int i = 0; i < num; i++) {
				System.out.print(" ");
			}
			System.out.println(node.getType());
			for(int i = 0; i < num; i++) {
				System.out.print(" ");
			}
			System.out.println(node.getDetail());
			printTree1(node.getLeft(), num + 7);
		}
	}
	
	/**
	 * get the leaf and the root of that subtree
	 * @param tablename
	 * @return
	 */
	private SqlTreeNode findInLeaf(String tablename) {
		for(int i = 0; i < leaf.size(); i++) {
			if(leaf.get(i).getTablename().equals(tablename))
				return getSubRoot(leaf.get(i));
		}
		return null;
	}
	
	/**
	 * get top root of the subtree, using by findInLeaf
	 * @param node
	 * @return
	 */
	private SqlTreeNode getSubRoot(SqlTreeNode node) {
		while(node.getParent() != null) {
			node = node.getParent();
		}
		
		return node;
	}
	
	/**
	 * return the table name
	 * 
	 * book.id
	 * orders.book_id
	 * we return book & orders
	 * 
	 * @param s
	 * @return
	 */
	private String[] getJoinTable(String[] s) {
		String[] ss = new String[2];
		ss[0] = s[2].substring(0, s[2].indexOf("."));
		ss[1] = s[4].substring(0, s[4].indexOf("."));
		return ss;
	}
	
	/**
	 * return table name
	 * 
	 * book.id or id
	 * we return both book
	 * 
	 * @param s
	 * @return
	 */
	private String getSelectTable(String s) {
		String ss;
		if(s.contains(".")) {
			ss = s.substring(0, s.indexOf("."));
		}
		else {
			ss = leaf.get(0).getTablename();
		}
			
		return ss;
	}
	
	/**
	 * return table name
	 * 
	 * book.id or id
	 * we return both book
	 * 
	 * @param s
	 * @return
	 */
	private String getProjectTable(String s) {
		String ss;
		if(s.contains(".")) {
			ss = s.substring(0, s.indexOf("."));
		}
		else {
			ss = leaf.get(0).getTablename();
		}
			
		return ss;
	}
	
	/**
	 * analyze where clause and get the constructs out of the sentences.
	 * 		select_int: id = 100 or id > 10
	 * 		select_char: nation = 'usa'
	 * 		join: id = id
	 * @param s
	 * @return
	 * 		ss[]
	 * 			0	sql: book.id=orders.book_id
	 * 			1	join
	 * 			2	book.id
	 * 			3	=
	 * 			4	orders.book_id
	 * 			5	*************
	 */
	private String[] makeJoinSelect(String s) {
		String ss[] = new String[6];
		ss[0] = "sql: " + s;
		ss[5] = "*************";
		if(s.contains("=")) {
			ss[2] = s.substring(0, s.indexOf("="));
			ss[3] = "=";
			ss[4] = s.substring(s.indexOf("=") + 1);
			if(ss[4].charAt(0) == '\'') {
				ss[1] = "select_char";
			}
			else if(ss[4].charAt(0) <= '9' && ss[4].charAt(0) >= '0') {
				ss[1] = "select_int";
			}
			else {
				ss[1] = "join";
			}
		}
		if(s.contains(">")) {
			ss[2] = s.substring(0, s.indexOf(">"));
			ss[3] = ">";
			ss[4] = s.substring(s.indexOf(">") + 1);
			ss[1] = "select_int";
		}
		if(s.contains("<")) {
			ss[2] = s.substring(0, s.indexOf("<"));
			ss[3] = "<";
			ss[4] = s.substring(s.indexOf("<") + 1);
			ss[1] = "select_int";
		}
		
		for(int i = 0; i < 6; i++) {
			//System.out.println(ss[i]);
		}
		
		if(!ss[2].contains(".")) {
			ss[2] = leaf.get(0).getTablename() +  "." + ss[2];
		}
		
		return ss;
	}
}
